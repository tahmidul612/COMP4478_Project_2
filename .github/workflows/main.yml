name: Test, Build, and Deploy with GameCI
on:
  pull_request:
    types:
      - opened
    branches:
      - main
    paths:
      - 'Assets/**'
      - 'Packages/**'
      - 'ProjectSettings/**'
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      workflow_mode:
        description: '[release] [WebGL]'
        required: false
        default: ''


jobs:
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}
      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-test-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-test-
      - name: Run Unit Tests
        uses: game-ci/unity-test-runner@main
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          testMode: playmode
          githubToken: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Quality Check
    runs-on: ubuntu-latest
    container: unityci/editor:ubuntu-2021.3.21f1-linux-il2cpp-1
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v1
        with:
          lfs: true
      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-lint-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: Library-lint-
      - name: Activate Unity
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        run: echo "$UNITY_LICENSE" > UnityLicense.ulf && unity-editor -nographics -logFile /dev/stdout -quit -username "$UNITY_EMAIL" -password "$UNITY_PASSWORD" -manualLicenseFile UnityLicense.ulf
      - name: Generate Solution
        run: unity-editor -nographics -logFile /dev/stdout -customBuildName COMP4478_Project_2 -projectPath . -executeMethod Packages.Rider.Editor.RiderScriptEditor.SyncSolution -quit

  buildWithLinux:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: tests
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - WebGL
    outputs:
      buildVersion: ${{ steps.build.outputs.buildVersion }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-build-${{ matrix.targetPlatform }}-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-build-${{ matrix.targetPlatform }}-
            Library-build-
      - name: Build Unity Project
        id: build
        uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
      - name: Upload Build
        uses: actions/upload-artifact@v3
        if: github.event.action == 'published' || contains(github.event.inputs.workflow_mode, matrix.targetPlatform) || (contains(github.event.inputs.workflow_mode, 'Steam') && matrix.targetPlatform == 'StandaloneLinux64')
        with:
          name: ${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

  deployToGitHubPages:
    name: Deploy to the Web via GitHub Pages
    runs-on: ubuntu-latest
    needs: buildWithLinux
    if: github.event.action == 'published' || (contains(github.event.inputs.workflow_mode, 'release') && contains(github.event.inputs.workflow_mode, 'WebGL'))
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - name: Download WebGL Artifact
        uses: actions/download-artifact@v3
        with:
          name: WebGL
          path: build/WebGL
      # - name: Copy the WebGL build artifacts to the GitHub Pages directory
      #   env:
      #     WEBGL_BUILD_PATH: ${{ format('{0}/build/WebGL', github.workspace) }}
      #     WEBGL_PAGES_PATH: ${{ format('{0}/docs', github.workspace) }}
      #   run: cp -r $WEBGL_BUILD_PATH/* $WEBGL_PAGES_PATH
      # - name: Deploy to GitHub Pages
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     branch: webgl
      #     create_branch: true
      #     file_pattern: docs/**
      #     commit_message: Deploy to GitHub Pages

      - name: Archive artifact
        env:
          INPUT_PATH: ${{ format('{0}/build/WebGL', github.workspace) }}
          TEMP_DIR: ${{ format('{0}/docs', github.workspace) }}
        run: |
          mkdir -p "$TEMP_DIR"
          chmod -c -R +rX "$INPUT_PATH" | while read line; do
            echo "::warning title=Invalid file permissions automatically fixed::$line"
          done
          tar \
            --dereference --hard-dereference \
            --directory "$INPUT_PATH" \
            -cvf "$TEMP_DIR/artifact.tar" \
            --exclude=.git \
            --exclude=.github \
            .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        env:
          TEMP_DIR: ${{ format('{0}/docs', github.workspace) }}
        with:
          name: webgl-gh-pages
          path: $TEMP_DIR/artifact.tar
          retention-days: 1
          if-no-files-found: error